;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

; //BCRASH Wait, dang, I just remembered - I've seen partially changed bytes get sent. :/ This means our "always send" method may not work.  ...Unless I DO turn WR# on/off?
; //CHECK Turn WR# on/off?

.program write2ftdi
.side_set 1 opt
; .wrap_target
;     ; pull IfEmpty Block   side 0
;     out pins, 7          side 1
;     ; pull IfEmpty Block   side 1
;     out pins, 7          side 0
; .wrap

; .wrap_target
;     pull Block           side 0
;     out pins, 7          side 1
;     pull Block           side 1
;     out pins, 7          side 0
; .wrap

;     set x, 0            side 0
; .wrap_target
;     jmp x-- continue0   side 0
; continue0:
;     mov pins, x         side 1
;     jmp x-- continue1   side 1
; continue1:
;     mov pins, x         side 0
; .wrap

.wrap_target
    out pins, 7          side 0
    nop                  side 1
    out pins, 7          side 1
    nop                  side 0
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void write2ftdi_program_init(PIO pio, uint sm, uint offset, uint data_pins_7, uint clk_then_wr_pin) {
   pio_sm_config c = write2ftdi_program_get_default_config(offset);
   int N = 7;//
   for (int i = 0; i < N; i++) {
       pio_gpio_init(pio, data_pins_7+i);
   }
   pio_sm_set_consecutive_pindirs(pio, sm, data_pins_7, N, true);
   sm_config_set_out_pins(&c, data_pins_7, N);

;    pio_gpio_init(pio, clk_then_wr_pin);
;    pio_sm_set_consecutive_pindirs(pio, sm, clk_then_wr_pin, 1, false);
;    sm_config_set_in_pins(&c, clk_then_wr_pin);
      
   pio_gpio_init(pio, clk_then_wr_pin);
   pio_gpio_init(pio, clk_then_wr_pin+1);
   pio_sm_set_consecutive_pindirs(pio, sm, clk_then_wr_pin, 2, true);
   sm_config_set_set_pins(&c, clk_then_wr_pin, 2);
   sm_config_set_sideset_pins(&c, clk_then_wr_pin);

   //sm_config_set_jmp_pin(&c, comms_pin);
   
   pio_sm_init(pio, sm, offset, &c);
}
%}
